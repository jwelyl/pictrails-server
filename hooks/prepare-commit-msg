#!/usr/bin/env python3

# The reason not to use the "commit.template" option is to create a commit message through the branch name.

from subprocess import check_output
import sys
from typing import List

""" CommitMessageTemplate """
prefix_content: str = '''
- 

'''
guide: str = '''
# ===== Commit Types =====
# bugfix: fix bugs
# chore: modify the cmake or config files
# docs: update the readme or comments
# feat: add new features
# test: add test codes
# refactor: refactor codes

# ===== Commit Contents =====
# Describe a detailed description.

'''
branch_types: dict = {'b': 'bugfix', 'c': 'chore', 'd': 'docs', 'f': 'feat', 't': 'test', 'r': 'refactor'}


def branch_check() -> str:
    branches: List[str] = str(check_output('git branch', shell=True)).split('\\n')
    branch_line = ''.join([b for b in branches if '*' in b])
    idx: int = int(''.join([str(i) for i in range(len(branches)) if '*' in branches[i]]))
    # Exception for `rebase`, not for `pull`.
    if 'rebasing' in branch_line:
        return
    if idx == 0:
        branch = branch_line[4:]
    else:
        branch = branch_line[2:]
    print(f'Checking branch: {branch}')
    # If branch name is specified as "devel" or "stable", make branch in GitLab "/branches/new".
    if not branch.count('/') >= 3:
        raise NameError('***** CHECK YOUR BRANCH *****\n'
                        'If branch name is specified as "devel" or "stable", make branch in GitLab "/branches/new".')
    branch_type, team, branch_title, author = branch.split('/')
    if branch_type not in branch_types:
        raise NameError('***** CHECK YOUR BRANCH TYPE *****')
    prefix = '[' + branch_types.get(branch_type) + ']' + prefix_content
    if 'fe' not in team and 'be' not in team:
        raise NameError('***** CHECK YOUR BRANCH TEAM *****')
    if len(branch_title) < 3:
        raise NameError('***** CHECK YOUR BRANCH DESCRIPTION *****')
    if '_' not in author or len(author) <= 4:
        raise NameError('***** CHECK YOUR BRANCH AUTHOR *****')
    return prefix


def main(args: List[str]) -> None:
    # Set commit message file
    commit_message_file = args[1]
    # Check commit types
    if len(args) > 2:
        commit_type = args[2]
    else:
        commit_type = ''
        '''
        # Legacy code about hash.
        if len(args) > 4:
            commit_hash = args[4]
        else:
            commit_hash = ''
        '''
    # Write commit message template
    prefix = branch_check()
    if not('message' in commit_type):
        f = open(commit_message_file, 'r', encoding='utf=8')
        pre_contents = f.read()
        f.close()
        if len(args) > 3:
            f = open(commit_message_file, 'w', encoding='utf-8')
            f.write(pre_contents)
            f.write(f'{guide}')
        else:
            f = open(commit_message_file, 'w', encoding='utf-8')
            f.write(f'{prefix}')
            f.write(f'{guide}')
            f.write(pre_contents)
        f.close()


if __name__ == '__main__':
    main(sys.argv)

